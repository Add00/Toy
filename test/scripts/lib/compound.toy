import compound;

//test concat
{
	//test array concat
	{
		var a = [1, 2, 3];
		var b = [4, 5, 6];

		var c = a.concat(b).concat(b);

		assert c == [1, 2, 3, 4, 5, 6, 4, 5, 6], "array.concat() failed";
	}

	//test dictionary concat
	{
		var a = ["one" : 1, "two": 2, "three": 3];
		var b = ["four" : 4, "five": 5, "six": 6];

		var c = a.concat(b);

		assert c.length() == 6, "dictionary.concat().length() failed";

		assert c == ["one" : 1, "two": 2, "three": 3, "four" : 4, "five": 5, "six": 6], "dictionary.concat() comparison failed";
	}

	//test dictionary concat with clashing keys
	{
		var a = ["one" : 1, "two": 2, "three": 3, "random": 1];
		var b = ["four" : 4, "five": 5, "six": 6, "random": 2];

		var c = a.concat(b);

		assert c["random"] == 1, "dictionary.concat() clashing keys failed";
	}

	//test string concat
	{
		var a = "foo";
		var b = "bar";

		var c = a.concat(b);

		assert c == "foobar", "string.concat() failed";
	}
}


//test containsKey
{
	var d = ["one": 1, "two": 2];

	assert d.containsKey("one") == true, "dictionary.containsKey() == true failed";
	assert d.containsKey("three") == false, "dictionary.containsKey() == false failed";
}


//test containsValue
{
	var a = [1, 2, 3];
	var d = ["one": 1, "two": 2];

	assert a.containsValue(1) == true, "array.containsValue() == true failed";
	assert a.containsValue(5) == false, "array.containsValue() == false failed";
	assert d.containsValue(1) == true, "dictionary.containsValue() == true failed";
	assert d.containsValue(3) == false, "dictionary.containsValue() == false failed";
}


//test every
{
	var a = [1, 2, 3];
	var d = ["one": 1, "two": 2];

	var counter = 0;
	fn f(k, v) {
		counter++;
		return v;
	}

	assert a.every(f) == true, "array.every() == true failed";
	assert d.every(f) == true, "dictionary.every() == true failed";

	assert counter == 5, "Unexpected number of calls for _every() == true";

	counter = 0;
	a[1] = false;
	d["two"] = false;

	assert a.every(f) == false, "array.every() == false failed";
	assert d.every(f) == false, "dictionary.every() == false failed";

	assert counter == 4, "Unexpected number of calls for _every() == false";
}


//test forEach
{
	var counter = 0;

	fn p(k, v) {
		counter++;
		print string k + ": " + string v;
	}

	var a = ["a", "b"];
	var d = ["foo": 1, "bar": 2, "bazz": 3, "fizz": 4];

	a.forEach(p);
	assert counter == 2, "forEach ran an unusual number of times";

	counter = 0;
	d.forEach(p);
	assert counter == 4, "forEach ran an unusual number of times";
}


//test getKeys
{
	var d = ["foo": 1, "bar": 2];

	var a = d.getKeys();

	assert a.length() == 2, "_getKeys() length failed";

	//NOTE: dependant on hash algorithm
	assert a == ["bar", "foo"], "_getKeys() result failed";
}


//test getValues
{
	var d = ["foo": 1, "bar": 2];

	var a = d.getValues();

	assert a.length() == 2, "_getValues() length failed";

	//NOTE: dependant on hash algorithm
	assert a == [2, 1], "_getValues() result failed";
}


//test map
{
	//test map with toy functions
	{
		fn increment(k, v) {
			return v + 1;
		}

		var a = [1, 2, 3];
		var d = ["four": 4, "five": 5, "six": 6];

		assert a.map(increment).map(increment).map(increment) == [4,5,6], "array.map() failed";
		assert d.map(increment).map(increment).map(increment) == [8,9,7], "dictionary.map() failed";
	}

	//test map with native functions
	{
		//TODO: write some native functions for use with map
	}
}


//test reduce
{
	var a = [1, 2, 3, 4];
	var d = ["one": 1, "two": 2, "three": 3, "four": 4];

	fn f(acc, k, v) {
		return acc + v;
	}

	assert a.reduce(0, f) == 10, "array.reduce() failed";
	assert d.reduce(0, f) == 10, "dictionary.reduce() failed";
}


//test some
{
	var a = [false, false, false];
	var d = ["one": false, "two": false];

	var counter = 0;
	fn f(k, v) {
		counter++;
		return v;
	}

	assert a.some(f) == false, "array.some() == false failed";
	assert d.some(f) == false, "dictionary.some() == false failed";

	assert counter == 5, "Unexpected number of calls for _some() == false";

	counter = 0;
	a[1] = true;
	d["two"] = true;

	assert a.some(f) == true, "array.some() == true failed";
	assert d.some(f) == true, "dictionary.some() == true failed";

	assert counter == 4, "Unexpected number of calls for _some() == true";
}


//test toLower
{
	assert "Hello World".toLower() == "hello world", "_toLower() failed";
}


//test toString
{
	var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

	var s = a.toString();

	assert s == "[[1,2,3],[4,5,6],[7,8,9]]", "array._toString() failed";
}


//test toUpper
{
	assert "Hello World".toUpper() == "HELLO WORLD", "_toUpper() failed";
}


//test trim defaults
{
	{
		//test a bunch
		fn test(s, pass) {
			var result = s.trim();
			assert result == pass, "_trim(" + result + ") failed";
		}

		test("hello world", "hello world");
		test(" hello world", "hello world");
		test("hello world ", "hello world");
		test(" hello world ", "hello world");
		test("  hello world", "hello world");
		test("hello world  ", "hello world");
		test("  hello world  ", "hello world");
		test("                           hello world", "hello world");
		test("hello world                ", "hello world");
		test("                           hello world                           ", "hello world");

		//one for goot luck
		assert " hello world ".trim() == "hello world", "hello world.trim() failed";
	}

	//test trim custom values
	{
		var chars = "heliod";

		assert "hello world".trim(chars) == " wor", "custom _trim() failed";
	}

	//test trimBegin() & trimEnd()
	assert "  foo  ".trimBegin() == "foo  ", "string.trimBegin() failed";
	assert "  foo  ".trimEnd() == "  foo", "string.trimBegin() failed";
}


print "All good";
