import compound;

//test getKeys
{
	var d = ["foo": 1, "bar": 2];

	var a = d.getKeys();

	assert a.length() == 2, "_getKeys() length failed";

	//NOTE: dependant on hash algorithm
	assert a == ["bar", "foo"], "_getKeys() result failed";
}


//test getValues
{
	var d = ["foo": 1, "bar": 2];

	var a = d.getValues();

	assert a.length() == 2, "_getValues() length failed";

	//NOTE: dependant on hash algorithm
	assert a == [2, 1], "_getValues() result failed";
}


//test toLower
{
	assert "Hello World".toLower() == "hello world", "_toLower() failed";
}


//test toUpper
{
	assert "Hello World".toUpper() == "HELLO WORLD", "_toUpper() failed";
}


//test trim defaults
{
	//test a bunch
	fn test(s, pass) {
		var result = s.trim();
		assert result == pass, "_trim(" + result + ") failed";
	}

	test("hello world", "hello world");
	test(" hello world", "hello world");
	test("hello world ", "hello world");
	test(" hello world ", "hello world");
	test("  hello world", "hello world");
	test("hello world  ", "hello world");
	test("  hello world  ", "hello world");
	test("                           hello world", "hello world");
	test("hello world                ", "hello world");
	test("                           hello world                           ", "hello world");

	//one for goot luck
	assert " hello world ".trim() == "hello world", "hello world.trim() failed";
}


//test trim custom values
{
	var chars = "heilod";

	assert "hello world".trim(chars) == " wor", "custom _trim() failed";
}


print "All good";
